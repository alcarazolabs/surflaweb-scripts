#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/3674d5c3-03b9-4e84-87b4-886b42adeb9b 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature;
  int humidity;
  int posicion_servo1;
  bool lEDButton;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Servo.h>

#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

#define DHTPIN 7    // Digital pin connected to the DHT sensor 
#define DHTTYPE    DHT22     // Write DHT11 or DHT22 According to your Sensor
DHT_Unified dht(DHTPIN, DHTTYPE);

unsigned long previousMillis = 0;
const long interval = 5000; //milliseconds  total time for 20 Seconds


Servo SERVO1;

int SERVO1_PIN = 9;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  dht.begin(); //Init DHT

  STHAM();
  
  SERVO1.attach(SERVO1_PIN);
  
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    STHAM();
    previousMillis = currentMillis;
  }
}

/*
  Since LEDButton is READ_WRITE variable, onLEDButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLEDButtonChange()  {
  // Add your code here to act upon LEDButton change

  if(lEDButton == 1){
    digitalWrite(LED_BUILTIN, HIGH);
  }else if(lEDButton == 0){
    digitalWrite(LED_BUILTIN, LOW);
  }
  
}



void STHAM(){
  // Get temperature event and print its value.
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
    //Assign temperature value 0 to Cloud Variable
    temperature=0;
  }
  else {
    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("°C"));
    //Assign temperature value to Cloud Variable
    temperature=event.temperature;
  }
  
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    Serial.println(F("Error reading humidity!"));
    //Assign humidity value 0 to Cloud Variable
    humidity=0;
  }
  else {
    Serial.print(F("Humidity: "));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
    //Assign humidity value to Cloud Variable
    humidity=event.relative_humidity;
  }
}

/*
  Since PosicionServo1 is READ_WRITE variable, onPosicionServo1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPosicionServo1Change()  {
  // Add your code here to act upon PosicionServo1 change

  SERVO1.write(posicion_servo1);
  
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}